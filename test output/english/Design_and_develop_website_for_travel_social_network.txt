
Firstly, I would like to extend my sincere thanks to all the teachers at the School
of Information and Communication Technology - Hanoi University of Science and
Technology, who taught and educated me. Thank you to the teachers who provided
us all with support, guidance, and precious life lessons which will help me a lot in
In particular, I would like to express my deepest appreciation to my instructor
Tran Hai Anh. He gave me a lot of good advice on choosing the topic and building
the system’s functions. I appreciate his guidance that made it possible for me to
Lastly, I would like to express my gratitude to everyone who helped and supported me through my 5-year journey. Thank you parents for always caring, giving
useful advice, and creating the best environment for my growth, especially for my
After the COVID epidemic was overcome worldwide, people’s demand for travel
increased much. This leads to the need for more information channels for people
to share travel experiences or search for information related to the places they want
to visit. Currently, there are many channels of tourism information, but they have
not been specialized into a website that only shares and tracks tourism information. Nowadays most people can access the internet very easily. Therefore, I have
researched and developed a travel social networking website that allows people to
easily search for details about the hotel or tourist destination they need or follow
other users with the same passion for traveling.
This social networking website will be designed according to the client-server
model. In which the server side will use java spring boot and design according
to microservice architecture to easily maintain and scale the application when the
number of users increases. Docker will be used as the environment for development
and deployment. More specifically, docker will be used to build an environment
including a database, Kafka, Redis, and GUI tool to interact with DB, ... The clientside will use the ReactJS library developed by Facebook. The client-side will also
be designed so that we can easily maintain or add a new feature.
Finally, we will get a system of social networking websites that are highly extensible, easy to change, and high performance. The website serves users in finding the
right place for vacations, outings with friends, or storing memories and spreading
joy and positive energy to everyone.
CRUD Create, read, update, delete
Along with the process of globalization and the development of information
technology, the internet in the world and Vietnam has almost been covered. The
participation of individuals on the internet is increasingly active and the need to
share information and connect with friends is an essential need to promote the
birth and development of social networks.
Currently, social networks are developing extremely brilliantly, and the number of people accessing and registering members in social networks is increasing.
Typically, some social networking websites are Facebook or Twitter. Even so, user
demand is still very high and specificity is even more necessary.
After the COVID pandemic is over, domestic tourism activities have witnessed
a boom, represented by the strong growth of visitors over the months. According
to the Vietnam National Administration of Tourism, in May and June 2022, the
number of domestic tourists reached 12 million and 12.2 million respectively. This
is the highest number of domestic visitors in a month in Vietnam in recent years. As
a result, the number of domestic tourists in the first 6 months of 2022 reached 60.8
million (nearly 1.4 times higher than the same period in 2019), of which about 8.3
million guests stayed. Total revenue from tourists is estimated at 265,000 billion
According to Digital’s statistics, as of June 2021, the number of Internet users
in Vietnam is nearly 70 million, an increase of 0.8% in the period 2020-2021 (accounting for more than 70% of the population); The number of social network users
in Vietnam is nearly 76 million, an increase of nearly 10 million people within a
year (equivalent to 73.7% of the population). Every day, Vietnamese users spend
up to 7 hours participating in Internet-related activities.
If Reddit is a website specializing in updating social news, LinkedIn is a place
to connect employers and candidates, then I aim to build a social networking site
specializing in sharing photos or videos about tourist attractions, and user experiences. That’s why I chose the topic "Design and develop a website for travel social
network" for my graduation thesis, and I named this social network Vifrin.
The goal of the project is to build a social network to create a centralized environment with an intuitive interface that is easy to use, as well as can simplify
operations for users. In addition, it is also a tool for users to easily track favorite
places, and share their experiences after interesting trips. The system also allows
users to search for places of interest to get useful information about that place, as
well as featured hotels in that location. In addition, the system can be easily further
developed on mobile platforms (Android and IOS).
To meet the goals and requirements of the above problem, I would like to propose developing applications according to the client-server model. Specifically: (i)
On the backend side, I suggest using Java Spring Boot to build RESTful APIs, (ii)
On the frontend side, I suggest using ReactJs framework to build the user interface. In detail about the advantages and reasons for using these technologies in the
project, I would like to present them more clearly in Chapter ??
Social networking site aims to create a friendly, reliable environment, making it
easy for users to find useful information about the place they want to go. Users can
rate the place through comments, all comments are real-time, helping the rating of
the place to be updated as quickly as possible. What’s more, tourist destinations
also suggest featured hotels, making it easier for users to choose accommodation
when starting a trip. Users can follow other users when they share an experience,
enter reviews, to express their feelings about that experience. The system is suitable
for many different audiences of many ages, as long as that person needs to travel.
To meet the goals of the solution, the system needs to have good performance
and easily integrate many different technologies. Vifrin is a web product, built on
the client-server model, which divides the application into two components. The
server is a place to provide APIs that clients can use to interact with data. The
advantages of this model are reflected in centralization, security, scalability, and
accessibility. The server side will use the Java Spring Boot Framework designed
according to the microservices architecture, with many outstanding features compared to mono service, increasing the ability to test, maintain, and scale the application. The client-side will use the ReactJS library to create the user interface, use
redux, and redux-saga to manage the global state, increase the scale when adding
new features to the system, easier to test execution. After the application development process, I completed the web version with all the features. The application
has been deployed on Microsoft Azure servers. When developing and deploying,
I use docker to help install the environment and run the project faster and more
For the rest of this graduation thesis, it will be presented in the following seChapter 2 Survey: In this chapter, I would like to show some reviews about other
methods and some main functions of this software.
Chapter 3 Methodology: This chapter covers system design, structural modeling,
behavior modeling, overview architecture design, class design, database design,
Chapter 4 System analysis and design: After researching user demand as well as
doing some surveys, I started to design and implement the system.
Chapter 5 System deployment and evaluation: This chapter talks about test results and actual implementation status
Chapter 6 Solution and contribution: The main content of this chapter will be
about proceeding to build the system and describing the results achieved.
Chapter 7 Conclusion: The final chapter presents the points that have worked
and failed in the project, summarizes the development results, and analyzes new
directions that allow improvement and upgrading of the system.

a, Detailed use case diagram for "Post module"
•Create a post: Users can share feelings, photos, videos about a place through
•Get lists post: Users get list personal posts or other user’s post
•Edit a post: Users can edit personal posts
•Delete a post: Users can delete personal posts
•Aggregate feeds: Users can see the posts they are interested in by following
other users or system can suggest posts.
b, Detailed use case diagram for "Comment module"
•Comment a post: Users can comment on post
•Comment a destination: Users can comment on destination
c, Detailed use case diagram for "Like module"
•Like a post: Users can like post
•Unlike a post: Users can unlike post
•Like a comment: Users can like comment
•Unlike a post: Users can unlike comment
d, Detailed use case diagram for "Rate module"
•Rate a destination: Users can rate destination from 1 star to 5 star
e, Detailed use case diagram for "Search module"
•Search hotels: Users can search hotels with keyword on the system
•Search destinations: Users can search destinations
•Search users: Users can search other users
f, Detailed use case diagram for "Destination module"
•Get detail of a destination: Users can get information of destination: name,
g, Detailed use case diagram for "Hotel module"
•Get list hotels of destination: Users can get list suggested hotels when see
•Get detail a hotel: Users can get information of hotel: name, description, media, price, phone, address, utilities.
h, Detailed use case diagram for "Profile module"
•Change avatar: Users can change their avatar.
•Update full name: Users can update their full name.
•Update biography: Users can update their biography.
•Update date of birth: Users can update their date of birth.
•Update country: Users can update their country.
•Update gender: Users can update their gender.
In this chapter, I present about the technologies used in the project, the reasons
for their use, their advantages and disadvantages.
Java Spring Framework (Spring Framework) is a popular, open source, the enterpriselevel framework for creating standalone, production-grade applications that run on
the Java Virtual Machine (JVM) [1] Java Spring Boot (Spring Boot) is a tool that
makes developing the web application and microservices with Spring Framework
faster and easier through three core capabilities:
•An opinionated approach to configuration.
•The ability to create standalone applications.
Spring Framework offers a dependency injection feature that lets objects define
their dependencies that the Spring container later injects into them. This enables
developers to create modular applications consisting of loosely coupled components that are ideal for microservices and distributed network applications.[2]
Spring Framework also offers built-in support for typical tasks that an application needs to perform, such as data binding, type conversion, validation, exception handling, resource and event management, internationalization, and more. It
integrates with various Java EE technologies such as RMI (Remote Method Invocation), AMQP (Advanced Message Queuing Protocol), Java Web Services, and
others. In sum, Spring Framework provides developers with all the tools and features they need to create loosely coupled, cross-platform Java EE applications that
Redis is an open-source key-value database. Data in a key-value database has
two parts: the key and the value. Because Redis can accept keys in a wide range of
formats, operations can be executed on the server and reduce the client’s workload.
Redis is often used for cache management and speeding up web applications.[3]
•Redis has excellent read-write performance, fast IO read-write speed from
memory, and supports read-write frequencies of more than 100k + per second.
•Redis supports string, lists, hashes, sets, ordered sets and other data type op•Redis supports data persistence, AOF and RDB
•Redis supports master-slave replication. The host will automatically synchronize the data to the slave, allowing read-write separation.
•All redis operations are atomic, and redis also supports atomic execution after
full consolidation of several operations.
•Master-slave synchronization, data synchronization will be delayed. If the host
goes down and some data is not synchronized to the slave before the shutdown,
the data will be inconsistent.
•It is difficult to support online capacity expansion. When the cluster capacity reaches the upper limit, the online capacity expansion will become very
complex. When the system goes online, enough space must be ensured, which
causes a great waste of resources.
Cloudinary is an end-to-end image- and video management solution for websites and mobile apps, covering everything from image and video uploads, storage,
manipulations, and optimizations to delivery. With Cloudinary, we can easily upload images and videos to the cloud and automate smart manipulations of those
media without installing any other software. Cloudinary then seamlessly delivers
your media through a fast content delivery network (CDN), optimized with the industry’s best practices. Additionally, Cloudinary offers comprehensive APIs and
administration capabilities, which you can easily integrate with your web and mobile apps. Cloudinary has only one limitation, that is we only have 25 GB of storage
PostgreSQL is an open-source relational database management system ( DBMS
) developed by a worldwide team of volunteers. [4] PostgreSQL is not controlled
by any corporation or other private entity and the source code is available free of
charge. PostgreSQL outperforms MongoDB in almost all performance test cases.
The PostgreSQL database management system (DBMS) measured between 4 and
15 times faster than MongoDB in transaction performance.
•PostgreSQL can run dynamic websites and web apps as a LAMP stack option.
•PostgreSQL’s write-ahead logging makes it a highly fault-tolerant database.
•PostgreSQL source code is freely available under an open source license. This
allows you the freedom to use, modify, and implement it as per your business
•PostgreSQL supports geographic objects so you can use them for locationbased services and geographic information systems.
•PostgreSQL supports geographic objects so it can be used as a geospatial data
store for location-based services and geographic information systems.
•To learn Postgres, you don’t need much training as it is easy to use.
•Low maintenance and administration for both embedded and enterprise use of
•Postgres is not owned by one organization. So, it has had trouble getting its
name out there despite being fully featured and comparable to other DBMS
•Changes made for speed improvement require more work than MySQL as
•Many open source apps support MySQL, but may not support PostgreSQL
•On performance metrics, it is slower than MySQL.
Apache Kafka is a distributed publish-subscribe messaging system that receives
data from disparate source systems and makes the data available to target systems
in real-time. Kafka is written in Scala and Java and is often associated with realtime event stream processing for big data.[5]
There are many benefits when using kafka
•Kafka is highly scalable. Kafka is a distributed system, which can be scaled
quickly and easily without incurring any downtime. Apache Kafka can handle
many terabytes of data without incurring much at all in the way of overhead.
•Kafka is highly durable. Kafka persists the messages on the disks, which pr
vides intra-cluster replication. This makes for a highly durable messaging sys•Kafka is highly reliable. Kafka replicates data and can support multiple subscribers. Additionally, it automatically balances consumers in the event of failure. That means that it’s more reliable than similar messaging services avail•Kafka offers high performance. Kafka delivers high throughput for both publishings and subscribing, utilizing disk structures that are capable of offering
constant levels of performance, even when dealing with many terabytes of
Docker is a virtual machine, but unlike virtual machines that create a completely
separate operating system.[6] Docker allows the applications to use the Linux kernel of the same machine on which it is installed. By using this benefit, it can make
the applications ready to ship to other machines running the same Linux OS with
somewhat different configurations. Through Docker DevOps, developers can easily pack all parts of an application like libraries and other dependencies and ship it
out as a single package.
React.js,[7] more commonly known as React, is a free, open-source JavaScript
library. It works best to build user interfaces by combining sections of code (components) into full websites. Originally built by Facebook, Meta and the open-source
community now maintain it. One of the good things about React is that you can use
it as much or as little as you want! For example, we can build your entire site in React or just use one single React component on one page.[8] There are many other
famous FE libraries or frameworks such as Vuejs, AngularJs. So why would we
choose React instead of Vue.js, or vice versa? The big bonus to React is that it’s
maintained by Meta – a tech giant. Such strong support from a main player in the
tech world provides React the stability and long-term support that most libraries
just don’t have. This gives developers the confidence that React won’t be deprecated in the near future, and developments will continue to improve it. Besides,
React is better than Angular due to its virtual DOM implementation and rendering optimizations. Migrating between React’s versions is quite easy, too; you don’t
need to install updates one by one, as in the case of Angular. Finally, with React,
developers have myriads of existing solutions they can use
Redux Saga is a middleware library used to allow a Redux [9] store to interact with resources outside of itself asynchronously. This includes making HTTP
requests to external services, accessing browser storage, and executing I/O operations. These operations are also known as side effects. Redux Saga helps to organize these side effects in a way that is easier to manage.
We can allocate three key benefits of sagas:
•Simplicity in organiziting difficult side effects sequences
Antd is a collection of React components built according to the design standards
of the Ant UED Team. Similar to the Material Design standard, Ant provides most
of the common components in modern web applications, like Layout, Button, Icon,
DatePicket, and more. . . Besides that, Ant also has its interesting components, like
the LocaleProvider that allows you to change the language across the application.
Ant currently has over 51k stars on Github. Ant Design for React can be considered
as a collection of most React libraries. It meets most of your project’s requirements
without you having to install any additional libraries.
Antd is a FE-friendly library of pre-provided components that make it easy for
programmers to customize without spending much time and effort while still e
The figure above depicts the architecture of the system that will include frontend and backend. The frontend has 2 parts, an admin page and a user page which
use ReactJs to build UI/UX components and interact with the backend through
Rest APIs. The global state in ReactJS is managed by the redux-saga, which makes
components easier to test, and the application architecture is cleaner. Components
are injected only when used, resulting in better performance. I have developed a
tool to make code faster, and easier to interact with API. This will be explained
in more detail in chapter 4. The backend uses a microservice system [10], divided
into 11 services. Each service is implemented separately, to ensure that they can
work independently of each other. They are all connected to the database as PostgreSQL, each service will be attached to manipulate a table in the database. All
requests from the front end using restful API will be handled by the backend gateway service. Gateway service is supported by java spring boot in configuring which
request streams should be handled by which service. Services communicate with
each other by listening to Kafka queues. That means those services will subscribe
to a queue to listen to and handle events sent by other services. In addition, the system uses Redis to store cache queries. To create an environment for development
and deploy, I used docker and docker-compose to manage the config and version
+ Details of available services in the backend system:
•Gateway Service : all APIs request go through this gateway, which is then
•Auth Service : implement the registration, login API
•User Service : update user information, follow other users
•Post Service : add, edit, delete, view, save posts
•Comment Service : take care of APIs related to adding, editing, deleting com•Like Service : like the post or like the comment
•Destination Service : responsible for tourist destination functions
•Hotel Service : responsible for hotel functions
•Feed Service : aggregate feeds for users
•Media Service : interact with CDN to save media
•Search Service : responsible for the function of returning search results
•Chat Service : manage chats between users
•Docker : run services like database, Kafka and deploy service into containers
•Cloudinary : storage of multimedia files (photos, videos)
•Redis : save information on cache, serve to save some important information
•Kafka : assume the role of communication between services, handle asyn+ With both admin and user sites, I use ReactJS to build screens. I use reduxsaga to handle asynchronous logic. This layer also handles the business logic, we
won’t handle too much logic in screens/components(views). The structure of the
front-end is designed with folders and functions as shown:
The packages of service will have the same structure as a post-service (above
figure). Post-service will use 2 packages (i) com.vifrin.common : where the system’s shared data types are stored (eg entity, response structure definition, system’s shared constant functions ...). These data types are not divided into each
service, but centralized management in one place will have certain benefits. For
example, when we change a field in another database, the definition of the entity changes/calls the result of this service from service if the management is distributed in each service, then just change the classes in the package. in this package,
(ii)com.virgin.feign : used to call API from 1 service from another service, must
finish calling, get results, then the program will continue to run. This is different
from using Kafka in that if you fire an event on Kafka, an event is an asynchronous
event, there is no need to wait for the result of the action of firing the event on
Kafka. Next, we will clarify the function of the sub-packages in each service.
•client: define API to call between services. For example, we can using @GetMapping("/users"), an anotation imported by org.springframework.cloud.// openfeign.FeignClient to call API of user service from another service.
•config: contain common config of web (page size of list, default page number,..), redis, operator with data base( create, read, update, delete).
•util: common utils( operations with redis,..)
•dto: This only contain data, not business logic. In this system, when we get
result from DB, data will tranfer to store in DTO.
•response: define common format template
•repository: using org.springframework.stereotype.Repository package to create function to get data from database.
•payload: define payload of request which sent from client side
•type: common type of system( action type, notification type,...)
•entity: define field property and relationship between them in database
•config: custom sercurity config, for example check token before handle re•message: define message to send to kafka
•mapper: convert results when query from database to dto
•exception: contains error configurations that will be returned to the user when
the program encounters an error
•service: define the functions for the business logic, using the help of the repo
The main feature of this design is dependency injection.[12] This is a very famous technique in software design. Spring Boot is built on top of the Spring Framework, it uses XML and annotation to create stand-alone, production-grade Springbased applications more easily. Dependency Injection is evident in the architecture
of spring boots. As shown in the figure, class Sercurity Config is similar to a middleware, used to check the requirements of the request. Class Sercurity Config
extends from WebSecurityConfigurerAdapter, which is supported by spring framework. All requests must pass the check of this class before going to the next handler.
This class injects filters: CustomAuthorizationFilter (for decode token in header
of request). I will take another example. Class Post Repository is injected into class
Post Service . Of course, we can inject it with other repositories. All repositories
extend from class JpaRepository , which supports writing very concise queries.
We’ll talk more about it in 6.
The system interface is designed with a 16: 9 ratio, 1920x1080 resolution. Application support screen size for laptops, tablets, and mobile. The layout includes a
header, and content components arranged as shown below.
Below are wireframes of some other screens:

Detailed design of properties and methods for some of the most important classes
of post service are displayed in figure:




About the entity relationship diagram including entities: Admin, User, Destination, Hotel, Post, Comment, Media. Users are the main target of the system, need to
register for an account before using the functions. After signing up for an account,
users can follow other users to see other users’ latest posts on the feed. Users can
also create multiple posts, each post can have many photos and many comments.
Each comment can have multiple photos. Posts and comments can be liked. The
system has many destinations, each destination can have many hotels. Users can
rate that destination through review scores or comments. The administrator is the
person who manages the normal users, the destination, and the hotels of that destiThe social network system uses a relational database (SQL) with the advantages
mentioned in the previous section. Database using PostgreSQL technology.
Description of the tables in the database
Store information about users participating in the system, including name,
Store profile of users participating in the system, including phone, gender, bio,
Store list people who liked the post
Store user activities such as number of comment, follower, posts,...
Store posts that user shares
Store comments of destination, post
Store information of media such as url, width, height,...




The table 5.2 shows some testing scenarios for some of the most important fe
Monolithic architecture is considered to be a traditional way of building applications. A monolithic application is built as a single and indivisible unit. Usually,
such a solution comprises a client-side user interface, a server side-application, and
a database. It is unified and all the functions are managed and served in one place.
Normally, monolithic applications have one large code base and lack modularity.
If developers want to update or change something, they access the same code base.
So, they make changes in the whole stack at once. There are some weaknesses of
•Understanding: When a monolithic application scales up, it becomes too
complicated to understand. Also, a complex system of code within one application is hard to manage.
•Making changes: It is harder to implement changes in such a large and complex application with highly tight coupling. Any code change affects the whole
system so it has to be thoroughly coordinated. This makes the overall devel•Scalability: You cannot scale components independently, only the whole ap•New technology barriers: It is extremely problematic to apply new technology in a monolithic application because then the entire application has to be
Instead of using monolithic architecture, I use micro-service architecture. A
micro-services architecture breaks application down into a collection of smaller
independent units. These units carry out every application process as a separate
service. So all the services have their logic and database as well as perform specific functions. Within a micro-services architecture, the entire functionality is split
up into independently deployable modules which communicate with each other
through defined methods called APIs (Application Programming Interfaces). Each
service covers its scope and can be updated, deployed, and scaled independently.
Strengths of the micro-service architecture:
•Independent components: All the services can be deployed and updated
independently, which gives more flexibility. Secondly, a bug in one microservice has an impact only on a particular service and does not influence the
entire application. Also, it is much easier to add new features to a microservice application than a monolithic one.
•Easier understanding: All the services can be deployed and updated independently, which gives more flexibility. Secondly, a bug in one micro-service
has an impact only on a particular service and does not influence the entire
application. Also, it is much easier to add new features to a micro-service
application than a monolithic one.
•Better scalability: Another advantage of the micro-services approach is that
each element can be scaled independently. So the entire process is more costand time-effective than with monoliths when the whole application has to be
scaled even if there is no need for it. In addition, every monolith has limits
in terms of scalability, so the more users you acquire, the more problems you
have with your monolith. Therefore, many companies, end up rebuilding their
After research and implementation, I have built a micro-service system with the
Java Spring Boot framework. Spring Boot makes it very easy to deploy microservices. Each micro-service system must have a gateway, which is a software
application between a client and a set of back-end micro-services. I use cloudgateway, a package of maven that helps easily to create the configuration of the
Besides, I use JpaRepository to create an interaction with the database very
quickly and conveniently. All CRUD operations with the entity have been written,
which will save software development time. JpaRepository also supports writing
quick custom queries. For example, when defining the method of List<User> fin
ByEmailAddressAndLastname(String emailAddress, String lastname); . In the
repository interface, Spring Boot will automatically create the query, specifically in
this example is Select u From User u Where u.emailAddress = ?1 and u.lastname
= ?2. Here are some figures for Post Repository
In addition, all services will be monitored by Eureka, which is an application
that holds information about all client-service applications. Every micro-service
will register into the Eureka server and the Eureka server knows all the client applications running on each port and IP address. We can easily track the status of
the service through this application.
I have built each service into containers using docker. In the future, this system
is very convenient to deploy on Kubernetes, an open-source container orchestration platform of Google. I will add more plugins for tracing requests, logger, and
The front end is an important part of an application, that interacts with the user.
CRUD is the basic operation that most applications will be implemented. In vifrin
application, there are many operators with posts, comments, destinations, and hotels,...This requires a tool that helps handle some of the lines of code that software
developers have to type. This tool can support data processing from API and put it
into view to display to the front-end.
Redux-saga is a library that aims to make application side effects (i.e. asynchronous things like data fetching). At this part, we can perform a function to call
API using Axios, handle logic business, and dispatch results to the global state.
This separates the view and logic, so we can generate code according to a certain
CRUD form. Javascript is a language of any type. Therefore, after we get the returned result, we can put its value in a variable called ¨data¨. The initial idea is that
we will create a web page that allows entering the necessary parameters, depending
on the API headers, the parameters submitted, which is the action that will generate
the corresponding code. The program will also automatically create the function
name, and variable name based on the action name.
After developing and deploying, I get a website application deployed on vercel -
a platform for front-end frameworks and static sites, built to integrate with headless
content, commerce, or database. After entering the necessary information, we get
the code from dispatching an action to saving the data to the global state for the
view to use. Below is the interface of the website:
This tool can develop into a scripting language commands file (.sh) or even
become an extension of IDE visual studio code.
Performance is an issue that any large application has to deal with. React is
a component-based library. As the application expands, the larger the number of
components, the heavier the amount of data stored in the global state. Besides, if
we are including large third-party libraries. We need to keep an eye on the code we
are including in our bundle so that we don’t accidentally make it so large that our
app takes a long time to load. Hence we need a mechanism to only load the necessary stuff when the user needs it. This helps the client-side limit the processing of
We will apply the code splitting technique to solve this problem. In react, there
is a concept called lazy load. React supports a function called lazy() and turns
the component into a dynamic component, meaning that react loads the bundle
containing the returned component when this component is first rendered. Redux
supports replacing existing reducers with reducers that users need. With the redu
saga, we will gradually map the sagas associated with the pages the user wants to
see into the store saga in redux.
We will divide the application into screens, each screen will be a module that
manages its state and UI. Each of these modules will export config so that the
react-router side can connect between the route and the component. That is shown
As we can see, each path corresponding to a component . The component is dynamic and we must wait for it to implement the necessary module before showing
the UI to the screen. Hence we can see this module can import other modules to get
a saga handler and a reducer handler. This reduces the amount of code to write to
handle the business logic when getting data from the API. For example, in the profile screen, we have written logic to get the user’s data. If on the homepage we also
need this data then we just need to initialize the profileModule to the homepage.
Then the homepage will reuse the logic that we wrote in profileModule. Now, we
go to the details of the function initModules :
Based on what is exported from each screen module we can derive the corresponding saga and reducer. Then we can inject it into the redux store.
Currently, there are many channels online for people to find out if a certain
tourist destination is attractive or not. But currently, there is no website about
tourism built in the direction of social networks. Most current travel websites tend
to be commercial, often suggesting hotels or airline tickets for users to buy. The
interface of these websites is often difficult for people to see the information about
the places they are interested in.
With the desire to build an application that helps users who love travel, like to experience a new feeling in a strange place, have more perspective on the advantages
and disadvantages of places they have never been before quickly and conveniently.
I have built a system of social networking sites to share the travel experiences that
users have experienced, suggesting places or hotels for them to stop. When building, I tried to apply design technologies, and outstanding system architectures to
be able to develop more new features or deploy the system to meet a large number
of users in the future. The interface of the website is user-friendly, making it easy
to see the post of their favorite destination. Besides, I also develop tools to code
By completing this project, I was able to hone myself with valuable knowledge
and skills. From the smallest steps such as coming up with ideas, and surveying
other similar applications and systems, to the steps of business analysis, deployment and maintenance, and system upgrade, I have gained valuable experience.
valuable, useful for building and developing other applications in the future. Besides, the learning and understanding of technologies and techniques to be able to
solve the problems and problems posed by me have been applied flexibly, which is
reflected in the results of the good project. this profession. This will be an important and extremely valuable suitcase and knowledge so that I can be confident and
steady so that I can step out of school and develop further for my future career.
Despite spending time and trying to complete the project to the maximum extent, due to limited capacity and limited time, the problems in the system are still
relatively unresolved. Typically, the system’s functions are still not many. Deployment to the environment and put into actual use to get reviews from users is not
yet available. In addition, there are still some functions and businesses that have
been set out from the beginning but have not been implemented in this version. I
have grasped these limitations and will overcome them in the future, to improve
the quality and perfection of the application.
The functions provided by the system have met the objectives of the project.
However, some functions still need to be further improved to provide a better user
experience. Besides, to improve the speed of functions under heavy load in web
applications, it is necessary to learn and apply load balancing and parallel computing techniques to increase data processing performance. I must optimize code
and remove unnecessary code. In addition, I will improve more features such as
chat, notifications, or stories so that users have a better experience, and have more
choices when using the application. If the application is deployed, when there is
enough data, I can develop suggested models like destination suggestions, post
Above is the entire content of the project "Design and develop website for travel
social network". With limited time and limited skills and experience, my project
implementation process inevitably has shortcomings. I look forward to receiving
the guidance and comments of the teachers so that the system can be improved in