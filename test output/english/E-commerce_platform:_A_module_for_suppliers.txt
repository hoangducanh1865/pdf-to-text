
I would like to express my special thanks of gratitude toward my supervisor, Master
Nguyen Hong Phuong, who has provided able guidance and support in completing
In the 4.0 revolution, the considerable development of technology makes so
many utilities for humans in every aspect, specifically in shopping demand. However, because of the distance and time, nowadays, people take more time online
shopping, the online e-commerce appears. Especially in covid 19 disease, online
shopping has emerged as a "lifesaver," helping consumers secure their lives and
jobs and helping manufacturers and distributors of goods develop production and
business. Currently, Vietnam has nearly 45 million people participating in online
shopping. Online shopping is convenient and saves time. Consumers can freely
choose the necessary items and necessities for daily life and work without spending too much time everywhere that has the internet.
However, online shopping also has many problems. The seller delivers poor
quality, counterfeit goods. Many sellers only post pictures and prices, but the buyers wait forever without delivery, even the buyers finish trading. The risk of personal information being exposed when online shopping.
There are some solutions for customers to prevent risks when online shopping.
Firstly, customers chose the prestige e-commerce store. Secondly, the government
should take action to avoid goods of prestige from online shopping.
I think about creating an e-commerce site to help customers buy authentic goods
with reasonable shipping fees and the shortest time shipment. To do that, it needs
to make a subsystem for suppliers to manage their products and distributors. This
graduation research is about a module for suppliers in my e-commerce system. I
named it Soda e-commerce. This subsystem has a user-friendly experience and
a user-friendly user interface to help suppliers bring their products to Soda 

Currently, in the market, according to the trading model, a manufacturer will
produce products, and distributors will import and sell to dealers. From there,
retailers will bring products to consumers. The management of distributors and
agents in practice is quite difficult. Among distributors, dealers have price differences, and the appearance of counterfeit goods does not guarantee product quality.
In addition, price is increase two or three times because intermediaries make prices,
"pickpocket" consumers. Shoppers have few choices and suggestions and can’t tell
the difference between fakes. Solving these problems helps the market become stable, suppliers can manage distributors, and buyers are satisfied with the quality and
There are a lot of e-commerce platforms on the market, especially in Vietnam.
However, price differences and counterfeit goods have not been taken care of. Most
e-commerce platforms aren’t interested in distributors and dealers yet. On the side
of customers, users are not concerned about the quality of products when shopping
online. Distributors and agents do not have appropriate policies.
Therefore, I develop e-commerce that focuses on suppliers, distributors but still
brings authentic products to the customer. My E-commerce creates an easy and
convenient exchange of purchases. This e-commerce solves management issues of
price increment when trading among distributors, maximum cut of intermediaries,
bringing quality products to consumers. In addition, the suppliers can manage the
distributors bought their goods. This research focused on the module for the supplier in that e-commerce. The main functions of suppliers are managing their products, stock inventory, orders, and reports in this project.
It is necessary to create an e-commercial to help suppliers manage distributors
and bring products to consumers. I generate a provider’s management software to
help suppliers can manage their resources. Firstly, I thought about using microservice architecture. After research, I chose ASP.NET Boilerplate (ABP), an opensource and well-documented application framework. This framework can help by
offering a microservice-compatible, strict module architecture where your module
is split into multiple layers/projects and developed independently. The system needs
an API gateway as an intermediary between the client and the back-end system microservices. This gateway helps hide the structure of the microservices system from
the outside and quickly tracks and manages traffic. For the user interface, I use blazorise, a framework for building interactive client-side web UI. NET. For storage
data, I decide to use MongoDB. The research provides the solution for managing
suppliers in the e-commerce system.
The other parts of graduation research are organized as follows. Chapter 2 present
the main functional and non-functional requirement of the project. It mentions a
website for the supplier in an e-commerce system in a distributed architecture.
From the survey, I pointed out the critical business in this system and the detailed
specifications of each use case. This chapter also describes essential business processes in the activity diagram.
In chapter 3, I introduce about technology applied in this project to perform the
required function in chapter 2.
Architecture design, detail design, application building, testing, and deployment
are in chapter 4. Architecture design describes the software architecture with the
supplement or improvement and the overall design project with a UML diagram.
In the detail design section, I provide a specific description of user interface design, layer design, and database design. The library and tools used in this project
are mentioned in the application building section. In this section, the achievement
and illustration of the main functions are also explicitly described. Testing is an
indispensable part of this chapter. I design test cases for the essential tasks in this
section and analyze testing results. Finally, the deployment section demonstrates
the model and how to deploy the project in practice.
Finally, Chapter 5 is the conclusion of this project. This chapter is about the process of working on this project, the difficulties of mine, and how to face and solve
each difficulty, the upgrade. The experiment achievement and expensive lessons of
mine are mentioned in this chapter.
A small survey asking 20 people about their experience when shopping online
showed that most of them had at least once bought a fake. In addition, some people
have to wait half a month to receive their goods, and the shipping fee also affects
their decision to order. If the shipping fee is small, they will complete the order
quickly. Otherwise, they will consider the importance of the product and may not
The supplier wants to manage its product and the distributors in the market. Currently, on the market of e-commerce systems in Vietnam (such as Shopee, Lazada,
Tiki, etc.), most of them are platforms for retailers and end consumers, so retailers
will have to find their source of goods. That leads to unstable sources of goods,
unknown origin, non-optimal import prices, and complicated transportation methods, for example, having a close source but having to import the same item from
afar. Therefore, it is necessary to have an e-commerce platform between the manufacturer (where there is a stable, safe, and transparent source of goods) and the
Recently, similar platforms have appeared on the Vietnamese market. For example, Telio is a platform that imports groceries or drugs from a distributor to a retail
store. Or Alibaba is a place of direct exchange from factories or trading companies
to retailers or end users. As explained above, the value that these e-commerce platforms bring is the ability to provide a stable source of goods, helping small and
medium-sized commercial units not have a broken supply chain, and at the same
time can source selection. With reasonable import prices and optimal shipping
This research will make an e-commerce platform similar to the above, called
Soda. This project describes an e-commerce platform between Suppliers and Distributors and Customers. Customers buy goods from distributors, and the system
will split orders into small orders by supplier. The closest distributors has enough
goods to qualify for small order and accepts that the order will be prepared and
given to delivery. Distributors have to buy items with a minimum quantity corresponding. Suppliers will prepare these orders and give them to deliver. This research is a module for a supplier in the above e-commerce system. It includes the
•Manage resources for suppliers (including Inventory, Products, Orders, etc.).
•Distributors can select and order from multiple suppliers in one order.
•Suppliers can be flexible in choosing warehouses for picking and receiving
In the subsystem of suppliers, suppliers can manage their warehouse, product,
order, membership functions, view reports, and export reports.
The figure 2.1 show the general use cases, and actors join in subsystem for
This software has three actors: administrator, distributor, and supplier. The administrator can approve or reject a request of a supplier or distributor. The distributor can create/cancel an order. The system will separate the order into small orders
based on suppliers. Each small order will be given to the corresponding supplier on
their website. In is project, for simplicity the shipping free is zero. The suppliers are
the company responsible for their products about the quality and origin. To come
to a supplier in the system, they have to request to be suppliers when suppliers can
manage their resources and membership functions.
The suppliers must request to be suppliers by filling in all the required information. After the request sends successfully, the System will send an email with the
link to follow the recommendation.
When the admin rejects the request, System will send an email with the reason
for rejection to the supplier. They can update the request with the link in the email.
If the admin accepts the request, the System emails the supplier containing the
account to login into the System.
Similar to a use case request to the supplier, the distributor who wants to join
the system must create a request. And wait for the admin to approve it.
Admin can approve or reject the request of the supplier. After approval, the
system will send an email with account information to a supplier so that the supplier
can log in to the system or if the reject system will send an email with a reason and
link to update the request. Admin also has other actions with the supplier, such as
blocking, editing information, and changing the password, but these use cases are
not in this module. Admin can approve/reject the distributor request similar to the
The supplier can create a product, update information, and delete the product.
When editing product information, they can adjust the stock inventory of that prodUse case diagram of use case supplier manage order is show in figure 2.3
The supplier can view the distributor’s order, and they can accept or deny an
order. If they take, they have to pick a stock with an amount for each item in the
order. After preparing the order, they can change the order’s status to shipping.
They can also search order by the order number or address of the receiver.
The supplier has so many warehouses located in different locations. The figure
The module provides some actions with a warehouse: creating, updating, deleting, viewing a piece of information, and searching the warehouse by name.
The supplier can view the report of the product and order. The supplier can
export a file report in excel with the defined template in this use case.
The supplier has a store name and website URL updated on the website. This
information will appear in the view of the distributor, retailer, and customer.
The supplier can reset their password. After resetting successfully, they can log
in with the new password.
When supplier forgets their password, they can use this function. After they
submit the email, the system will send the link to reset the password in an email.
Then supplier can change to login with a new password.
To access the system, supplier has to login with correct tax-code and password.
The supplier also can log out of the system.
Distributor received order from deliver.
The processing an order from beginning until delivered is describe as Figure
As you can see, the distributor creates a valid order if the number of items
is more significant than a minimum order quantity which is a product attribute.
Whenever distributors make an order, the supplier’s reserve quantity will be substract. The reserved amount is to guarantee enough stock inventory for other orders.
The supplier can take the items from many warehouses in enough quantity. There
is a time limitation in accepting orders and preparing orders. If out of this time, the
order will automatically be canceled. The distributor can cancel the order before it
is delivered or if they do not receive a charge from the shipper. When an order is
delivered, the stock inventory will update.
HTML, known as Hypertext Markup Language, is document-layout. It defines
the syntax and placement of special embedded directions not displayed by the
browser. Still, it tells it how to display the document’s content, including text, images, and other support media.[1] HTML help to create a user interface in the
JavaScript is an object-based language that uses prototype objects to model inheritance. Using JavaScript to create a dynamic page.
CSS is cascading style sheets used to style elements making an attractive page.
CSS describes how it should render elements on the screen, paper, speech, or other
media. Use CSS because HTML and JavaScript are not enough to have a userfriendly website. With CSS, I can style the website as I want.
Blazor lets you build interactive web UIs using C instead of JavaScript. Blazor apps are composed of reusable web UI components implemented using C#,
HTML, and CSS. Both client and server code is written in C#, allowing you to
share code and libraries. Blazor is a feature of ASP.NET, the popular web development framework that extends the .NET developer platform with tools and libraries
for building web apps. [2] Many frameworks help to create a user interface, such
as reactjs, vuejs, etc. However, I chose blazorise because it is a new technology,
using C#, which is also the language I write backend. In this research, I use blazor Web Assembly. Many benefits come with using Web Assembly and, therefore,
high-level programming languages in client-side Web development, such as ease
of development and high performance of web applications. Web Assembly takes
advantage of current hardware capabilities to ensure the best speeds possible. Another benefit is that it provides client-side security. This is one of the weaknesses
of JavaScript. Web Assembly provides better security than JavaScript by acting as
both the backend and frontend. Four major browsers currently support WebAssembly: Chrome, Safari, Firefox, and Edge. We envision WebAssembly will gain more
popularity in client-side web development in the near future.[3]
ABP Framework offers an opinionated architecture to build enterprise software
solutions with best practices on top of the .NET and the ASP.NET Core platforms. It provides the fundamental infrastructure, production-ready startup templates, modules, themes, tooling, guides, and documentation to implement that architecture properly and automate the details and repetitive works as much as possible. ABP Framework can work with any UI framework such as Angular, MVC
page razor, and blazor. It can work with any database provider like entity framework core, MongoDB, and dapper. I implement domain-driven design architecture.
There are a lot of features provided by the ABP Framework to achieve real-world
scenarios easier, like Event Bus, Background Job System, Audit Logging, BLOB
Storing, Data Seeding, and Data Filtering. [4] Abp is so suitable for micro-service,
which is a technique applied in software that has an amount of user access simulBecause I chose abp framework, it only works with three database provider entity frameworks core, MongoDB, and dapper. My problem is e-commerce, so I
need a high database speed read data and more scalability. MongoDB is a No SQL
database that stores data in JSON-like documents with dynamic schema. Therefore,
it simplifies data integration and offers better scalability than traditional relational
E-commerce will have millions of users and expect more than 100 suppliers.
The system requires many users to want to get data at the same time with a good
response time. The response time is not guaranteed if I only use the database to
store. Elastic search is an open-source search engine built on top of Apache Lucene,
a full-text search library. Lucene is arguably the most advanced, high-performance,
fully featured search engine library today- both open source and proprietary. Elastic
search provides a distributed real-time document store where every field is indexed
and searchable, distributed search engine with real-time analytics, capable of scaling hundreds of servers and petabytes of structured and unstructured data. [5]
As mentioned before, this project uses microservice architecture. To communicate among microservice, I use the message to send. When I have a lot of notes
at the same time, how can I control it? I found that RabitMQ is the solution. RabbitMQ is one of the most popular open source message brokers. Message brokers is
an intermediary program designed to validate, transform and route messages. It is
to serve the communication among services. RabitQM helps the service send a response for each request quickly instead of running a procedure that takes resources
of the system. Pushing messages in a queue is a solution when I want to distribute
the message to many receivers and reduce work for workers. At the same time, so
many suppliers click to submit to request to be suppliers. So many requests sent to
the server will cause problems such as slowness, overload, congestion, etc We need
RabitMq to push requests in queue in the mechanism in figure 3.1:
Message producer publishes many requests, rabbitMQ exchanges them and pushes
them into an appropriate queue. Finally, consumers receive a message in the queue
Redis, a remote dictionary server, is an open source to save structure data and
can be used as a database, cache, or message broker. It protects data in structure
key-value in RAM, arranges, queries, and backups data in disk, helping backup
data when the system is in trouble.
Redis can be used as cache, counter, publish/subscriber, and queues. Because of
the speed of reading, data can be used as a cache, sharing data between services
or temporary databases. It can be used as a counter. Redis supports thread-safe
so that it can be synchronous among requests. Redis support creates a channel
to exchange data between publisher and subscriber. Finally, it is used to create a
queue for requests. For this research, I use Redis to create a queue and as a cache
to increase read data speed.
S3 stands for Amazon’s simple storage service. S3 provides infinite scalability
and high availability at a low cost. Currently, S3 is used mostly to store multi-media
documents (videos, photos, audio) shared by a community of people and rarely
updated. This paper aims to demonstrate the opportunities and limitations of using
S3 as a storage system for general-purpose database applications involving small
objects and frequent updates. Read, write, and commit protocols are presented.
Furthermore, such a storage system’s cost, performance, and consistency properties
For software architecture, I chose microservices architecture. Micro-services is
a software system development method in which different single-function applications are coupled together. Because the system expects thousands of users to
access the system simultaneously, with massive data, it is easy to be stuck, falling
down the server at any time. Using monolithic architecture requires massive supper storage and high configuration to guarantee a maximum response time of fewer
than 3 seconds. The advantage of microservices is that each service can be scaled
independently without disrupting the others. Because it is a distributed system,
a microservices framework is highly scalable and can avoid the bottlenecks of a
The system has many microservices: auth service, sales service, partnership service, warehouse service, shipping service, etc., and one gateway called web GateWay service. Each microservice is build base on domain-driven design principles
and patterns. Domain-driven design principles are new architecture that includes 3
•Domain layer : includes business objects and the core (domain) business rules.
This is the heart of the application
•Application layer: mediates between the Presentation and Domain Layers. Orchestrates business objects to perform specific application tasks. Implements
use cases as the application logic.
•Infrastructure layer: provides generic technical capabilities that support higher
layers mostly using 3rd-party libraries.
DDD is mostly interested in the Domain and the Application layers rather than
the Infrastructure and the Presentation layers. Apply architecture, the project had
a little change follow abp framework. The domain layer in this research includes
Domain, Domain.Shared, DbMigrator, MongoDB project. Dbmigrator layer to migrate database and seed data if needed. MongoDB project has context to connect to
database and repository interface. The repository is an intermediary layer to getting
data in an entity. This layer reduces the dependence of the business model on storage technology and enhances the ability to upgrade and replace technology when
necessary. Domain project includes entity and implementation of repository inte
face in MongoDB project. Domain shared has constant, enum,.. that all layers can
access. The application layer contains Application and Application.Contract. The
http layer includes Http.Api, Http.Client, Http.Host. These layers are to provide an
environment for the client to call remote HTTP services.
The UML package diagram of subsystem is shown in figure 4.1
Package web has 1 package publishing web which contain the project of user
interface application. Publishing web dependence with webbff package in gateway
and report package in services.
Commons package as it name, it contain everything can be reused by services
.It includes 2 package are Application and Domains. Applications contains statistic
class in common and Domains contain class in common.
The modules package contains two modules infrastructure and master data. In
addition, infrastructure contains modules like elastic search modules, clock modules, helper modules, and mass transit. Master data contains projects for geometries
Services contain all microservices in the system: authentic, partnership, warehouse, sales, shipping, reviews, and report service. The responsibility of Each service with a specific business. Auth service is to authenticate user and server. There
is a list of servers allowed to access the system, defined by the setting. Auth service
validates the user account information and generate and save token from enabling
the client to access the system. Partnership service responsibility on the business
of the actor’s information such as register to be the supplier and approved supplier,
register to be a distributor and approve distributor, etc Warehouse management is
the most important part of warehouse service. It is responsibility with the business
relate to managing warehouse and stock inventory, and assurance stock inventory
is always enough for all orders accepted. Shipping service in this project is quite
simple with the business of user’s shipping address and change state of order to
shipping. Perform order-related tasks is in sales service.
In gateway package contain webbff package which is work as a gateway for
system. It dependents all micro services in services package.
Each micro service has similarity UML diagram and relation to other packages.
figure 4.2 is sample UML package diagram of service reviews:
Application in webbff depends on application contract of micro services if it
need. While The Http.Client in webbff depend on all http.client of micro service.
In each micro service application package depend on common, modules if it need
to use any class in these package.
In each package of micro service, there are 9 small package. These relations
package is created base on domain driven design principle and pattern of abp
framework. Domain layer include domain share, domain package, DbMigrator and
MongoDb. Domain share contains constants, enum or other type can be safely
share with all layers. This package can also be shared to 3rd-party clients. Domain
package contains domain service interfaces and domain objects. Domain package
depends on the Domain.Shared package. Dbmigrator is to migrate database to synchronous object between objects in domains and in database. It also can be use
to seed data. Mongodb contain connection string to connect with database, and
implementation of domain service interface.
Application layer includes Application.Contracts and Application packages. Application.Contracts contain contains application service interfaces and related data
transfer objects. Application.Contracts depends on Domains.Shared package. Application package contains application service implementations.Application package depends on the Domain and the Application.Contracts packages.
Http.Client and Http.Api is in Http layer. Http.API package to develop a REST
style HTTP API for service, depends on Application.Constracts. It contains controller for each application service (generally by implementing their interfaces).
These controllers uses the application service interfaces to delegate the actions. It
just configures routes, HTTP methods and other web related stuffs if needed. Http
Api client to provide client services for the HTTP API package. Those client services implement application interfaces as clients to a remote endpoint.HTTP API
Client package only depends on the Application.Contracts package. [4]
Detailed package of use case request to be supplier is in figure 4.3 below:

I use Dependency Injection pattern for project, example in use case request to be
supplier. As mention in overall design, all class in services of package Application
implement services in Application.Contracts. Client in user interface application
service use interfaces in Application.Contracts by using dynamic client proxy of
abp framework instead of calling API thought http request.
Service SupplierRegistrationApplicationService used interface SupplierApproveRegisterResponse in command package, this interface is used in SupplierApproveRegit implement build routing slip adding activities which implements IActivity interface. All requests in routing slip is in queue and they will be send to suitable
Number of colors supported: 16,777,216 colors
•Location of standard buttons: At the bottom right (vertically) and in the middle
•Location of the messages: middle of the screen..
•Display of the screen title: The title is located at the top left of the frame in
•Consistency in expression of alphanumeric numbers: comma for separator of
thousand while strings only consist of characters, digits, commas, dots, spaces,
•Size of the text: medium size (mostly 16px). Font: Averta,Regular. Color:
•Input check process: Should check if it is empty or not. Next, check if the input
is in the correct format or not
Below are some image of user interface design:

a, Sequence diagram of use case register to be supplier
Sequence diagram of use case register to be supplier is described in figure 4.7
Suppliers want to login into the system. They must have an account. To do that,
they have to request to be suppliers by submitting the form register will all require
information filled. If they lack some fields, the system will notify the error. If it
is a valid form, the request will be sent to the server to check the existing email
or tax code. If the system has existed email or tax code, it will notify the error
so that supplier has to correct these invalid fields. If anything is good, a request
to be supplier will be created, and an email notifying the request action of the
supplier will be sent the email. That email contains the link for the supplier to
follow the request. Administrators can view all requests, check information then
accept or deny a request. If the request is received, the system will create a supplier
record and an account in the database and synchronize supplier information to
elastic search. All submissions will have the same tax code, and the email with
that request will be rejected. After that system will send an email to a supplier
with account information. If the admin denies the request, the system will email to
notify the reasons for rejection and give the link to see the appeal. From this link,
the supplier can update the request and request to be a supplier again.
b, Sequence diagram of use case manage warehouse
Suppliers will have many warehouses in different locations. Figure 4.8 below
described how they can manage warehouses in system.
The supplier can create a warehouse. When they submit the request, the system
validates the input and notifies them if they have an error. If it is a valid form,
the system will create a warehouse and inform the result of an action. Suppliers
also can view the warehouse list. The system will take all warehouses of that supplier to show on the page. They can search warehouses by name and view detailed
warehouse information. When suppliers want to delete the warehouse, they have to
guarantee that the warehouse is empty. That means there are not any products in
that warehouse. If not, the system will return an error.
c, Sequence diagram of use case update product
site. Identity server API scope saves all system scope, which is a microservice of
Database of sale service is described in figure 4.11 below:
Distributor orders will have many products. An Order will have a reason corresponding in the cancel reason table when the order is canceled. A product belongs
to one category when a change in the product price will be logged in the transaction log. A order has one shipping address. A shipping address can belong to many
ER diagram of service warehouse is figure 4.12. Supplier stock inventory saves
inventory of products in each warehouse. Distributor stock inventory is the warehouse of the distributor. When a change on inventory quantity will be logged in
the transaction log. Summary stock inventory saves total product quantity in all
ER diagram of partnership service is figure 4.1
A supplier is created from a supplier request. Suppliers save supplier information. Distributors protect distributor information. Suppliers and distributors can
have a business attribute. Access table saves users’ access time in the supplier store
The libraries and tool is show in table4.
Choosing this topic for graduation research is a challenge for me because I have
not had any experience with thousand users, especially e-commerce systems. However, I always want to learn new things and new techniques. In the process of working on this research, I stuck a lot of time.
Firstly, the challenge of new techniques and the framework for front-end and
back-end are new for me. They also are new techniques, especially blazor. The
documents and the examples project of blazor are pretty small. I spent a lot of time
reading the document and the framework’s source code to understand it. I learned
a lot of techniques when using abp frameworks, such as domain-driven design
patterns, dependency injection patterns, singleton patterns, etc., and applied them
to this project. I might not learn these things if I had chosen the framework in
graduation research one and two.
Secondly, I have no experience working with NoSQL, especially MongoDB. As
you know, mongo DB stores data in JSON-like documents. It is so different from
the SQL server I have learned at this university. The design database for the SQL
server is different from the database in MongoDB too. I had changed the data model
so many times to get the final version. The difference in a query put the work at
a standstill. However, after searching and reading the documentation, I finally got
In graduation research 2, I stored the image in google drive, then got the public
URL to return to the website. But this research, I cannot use the old way because
the storage of google drive of an account is limited. It is not high security with an
e-commerce system. I thought I should have a storage system to store the media.
Amazon service solved my problem. I found s3, which is a service of amazon to
storage media. Amazon S3 supports both server-side encryption and client-side
encryption for data uploads. Amazon S3 offers flexible security features to block
unauthorized users from accessing your data.
After learning distributed system course and reading the requirement of all ecommerce systems, I know that this system must be in a microservice architecture.
However, this is the first time of mine worked with a micro-service. It takes me
a lot of time to make the gateway work. The problem is communications among
micro-services. How can I take data from another service? The gateway in this
project also is responsible for aggregating data from micro-services to return to
the client. However, when the transaction requires other micro-services works, for
example, in the case of accepting a supplier’s order, it requires the sale service to
change the order state and the warehouse service to update the reserve quantity in
each stock. Abp framework support event bus combined with routing slip of mass
transit, so that from sale service, the system can send message to warehouse to
update reserve quantity in one transaction. If one event fails, a transaction will roll
back. I can follow the queue of the message by using rabitmq.
When the System has many redundant data such as in table supplier request. In
case requests are no longer to approved because of some reasons. What should I
do to save admin work? I thought, I will reject all request if exist a setting time.
After searching, I decided to use background job.The framework provide the class
HangfireBackgroundWorkerBase so that I can create my worker inherited it. Then
register this service to module of partnership host. It is a first time of mine working
with it. I faced with simple case so that it is pretty good.
I had no idea face with the requirement of response time for reading and searching data. The system is for Vietnamese people. Therefore it should allow search
words with no accents. In addition, the search time should be fast as possible. Only
using MongoDB can not solve this problem. However, I remembered the critical
word "elastic search" when I learned machine learning course. After reading the
document, this technique will solve the problem of searching data both in response
time and with no accent words. Despite that, elastic search require its library to
read and write data. That leads to a problem with using the new library . NET.
Until now, the system can get, write, read, and search data in elastic search, but I
felt that I had just discovered a small part of elastic search.
By passing all the difficulties when working in this research, the result is a subsystem of the supplier in an e-commerce system. The software is created based on
similar software, updated following specific businesses requirement. These subsystems help supplier manage their resource, orders, and views of the report. It has
great significance in management resources.
During the process of working in this research, I learned many valuable lessons.
Firstly, I applied theoretical knowledge from courses in the Hanoi university of
science and technology to the actual software. I had a deeper understanding of
what had been learned. Secondly, I learned a lot of new techniques and improved
my reading skill, my ability to work independently, and my ability to explore and
In the future, to complete the subsystem of the supplier, firstly, the project should
be integrated with a shipping system and payment system to complete the life cycle
from the distributor placing an order to the supplier receiving the money for that
order. Secondly, the project should extend the warehouse service into a warehouse
system to track each product. The warehouse system helps reduce the situation of
buying and selling counterfeit goods. Moreover, for e-commerce, subsystems for
distributors, retailers, and customers should be complete in the future.