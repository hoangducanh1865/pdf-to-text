
Lời đầu tiên em xin được gửi lời cảm ơn chân thành nhất tới thầy giáo, TS.Trần Hải
Anh đã tận tình hướng dẫn em trong suốt quá trình thực hiện đồ án tốt nghiệp vừa
qua. Thầy không những hướng dẫn, tư vấn định hướng đề tài, các chức năng của hệ
thống, mà còn tạo điều kiện thuận lợi cho em tiếp xúc, học hỏi thêm các kiến thức
công nghệ mới thông qua những buổi báo cáo, chia sẻ rất gần gũi. Em chúc thầy
luôn mạnh khỏe, công tác tốt, tiếp tục truyền động lực học tập và làm việc cho các
Em cũng xin gửi lời cảm ơn đến các thầy cô giáo thuộc trường Đại học Bách khoa
Hà Nội nói chung đã truyền đạt những kiến thức bổ ích không chỉ trong phạm vi
môn học mà còn là cả những kinh nghiệm quý báu trong cuộc sống của mình, giúp
em có được những kiến thức và kinh nghiệm như ngày hôm nay.
Tiếp đó xin được gửi lời cảm ơn tới những người bạn, những anh chị em trong khoa
HEDSPI trường Đại học Bách Khoa Hà Nội đã cùng mình sống trọn quãng thời
gian năm năm làm sinh viên. Cùng mình vượt qua những kỳ thi khốc liệt, những
môn học khó nhằn, truyền động lực cho mình trong suốt quá trình làm đồ án.
TÓM TẮT NỘI DUNG ĐỒ ÁN
Trong những năm gần đây, khi kinh tế ngày càng phát triển thì con người càng có
nhu cầu nâng cao chất lượng cuộc sống của bản thân, chính vì lẽ đó mà nhu cầu du
lịch cũng ngày càng tăng cao. Có thể thấy không ít những website cho phép chúng
ta có thể tìm kiếm và đặt được những căn phòng nghỉ dưỡng có chất lượng và dịch
vụ tốt của khách sạn chỉ bằng những thao tác đơn giản. Nhưng với xu thế giới trẻ
hiện nay, khách sạn không còn là mô hình duy nhất được lựa chọn mà thay vào đó
là các kiểu homestay, nhà nghỉ du lịch kiểu gia đình... Các nền tảng tiêu biểu trên
thế giới có thể kể đến như Booking hay Airbnb. Tuy nhiên chúng đều hướng đến
lượng người dùng toàn cầu, không có dành riêng cho người dùng Việt Nam. Ngoài
ra, việc trải nghiệm du lịch tự túc không giống như việc đi theo tour du lịch, mà
cần phải tìm hiểu kỹ, tham khảo ý kiến của những người đi trước về nơi ở, địa điểm
để tạo ra một lịch trình du lịch lý tưởng. Việc này đối với những người du lịch tự
túc hiện nay là tương đối khó khăn. Nhận thấy vấn đề này, đồ án này tập trung phát
triển một hệ thống nhằm kết nối giữa chủ nhà, chủ homestay và khách lưu trú giúp
họ có thể liên hệ với nhau khi có nhu cầu về nhà trọ, nơi nghỉ dưỡng. Một mặt,
hệ thống giúp cá nhân những người có nhu cầu dễ dàng tiếp cận các thông tin của
những địa điểm tham quan hay tìm cho mình một lịch trình du lịch phù hợp mỗi
khi đến một địa điểm bất kỳ. Mặt khác, hệ thống giúp các chủ nhà có thể quảng bá
thông tin nơi ở của mình rộng rãi tới các cá nhân.
Để đạt được điều này, hướng tiếp cận của đồ án là đưa ra một hệ thống mà người
dùng có thể dễ dàng tìm kiếm thông tin về nơi nghỉ ngơi phù hợp với tiêu chí của
bản thân. Bên cạnh đó, đồ án cũng cung cấp một hệ thống quản lý dành cho quản trị
viên và chủ nhà khi muốn đăng tải, quản lý thông tin về nơi nghỉ của mình. Điểm
đặc biệt của đồ án này là việc người dùng có thể chia sẻ lịch trình du lịch cá nhân
của mình cho người khác cùng tham khảo khi họ đã từng lưu trú ở địa điểm du lịch
đó, từ đó giúp nâng cao chất lượng mỗi chuyến du lịch của mọi người.
DANH MỤC CÁC TỪ VIẾT TẮT
Viết tắt Tên tiếng Anh Tên tiếng Việt
faceGiao diện lập trình ứng dụng
HTML HyperText Markup Language Ngôn ngữ đánh dấu siêu văn bản
CRUD Create/Read/Update/Delete Thao tác xem thêm sửa xoá cơ bản
CSDL Cơ sở dữ liệu
Host Chủ nhà, chủ homestay
CNTT Công nghệ thông tin
ĐATN Đồ án tốt nghiệp
Viết tắt Tên tiếng Anh
Firebase Dịch vụ cơ sở dữ liệu được hoạt động ở trên nền tảng
API Application Programming Interface – giao diện lập
trình ứng dụng, là cơ chế cho phép 2 thành phần phần
mềm giao tiếp với nhau bằng một tập hợp các định
Backend Tầng truy cập xử lý dữ liệu, xử lý nghiệp vụ của phần
Frontend Tầng trình diễn (giao diện người dùng)
Component Các thành phần giao diện độc lập có thể tái sử dụng
DOM Document Object Model, được dùng để truy xuất và
thao tác trên các tài liệu có cấu trúc dạng HTML hay
Review Đánh giá, bài nhận xét, phê bình
Ngày nay nhu cầu giải tỏa sau những ngày làm việc hay những giờ học căng
thẳng bằng những chuyến du lịch gần xa đang tăng lên đáng kể. Không chỉ những
dịch vụ trọn gói, nơi nghỉ dưỡng xa hoa đắt đỏ mà những chuyến du lịch tự túc
phù hợp với sở thích, kinh tế của cá nhân lại đang được mọi người ưa chuộng. Tuy
nhiên, việc tìm kiếm các thông tin về nơi ở hay một lộ trình du lịch phù hợp còn
tồn đọng một số bất cập như sau:
Đối với những người đi du lịch tự túc : Việc tìm kiếm các thông tin liên quan đến
nơi ở và các điểm du lịch nên đi tại nơi đó mất nhiều thời gian và công sức do các
thông tin thường rời rạc, không tập trung tại một chỗ nhất định. Ngoài ra, các thông
tin về lộ trình du lịch thường được cá nhân đăng tải tự do trên các nền tảng mà chưa
được kiểm chứng liệu người đó đã thực sự đến địa điểm đó hay chưa, điều này gây
khó khăn trong việc phán đoán tính xác thực của thông tin.
Đối với chủ nhà : Với những gia đình có nhiều phòng trống không sử dụng và muốn
tận dụng không gian đó để kiếm thêm thu nhập. Họ cần một nơi để đăng tải các
thông tin về nơi ở của mình để làm sao tiếp cận nhanh nhất đến với người dùng.
Nếu giải quyết được những vấn đề trên thì những người đi du lịch tự túc sẽ dễ dàng
hơn trong việc tìm kiếm, lên kế hoạch cho một chuyến đi. Đồng thời, chủ nhà cũng
dễ dàng mang hình ảnh homestay của mình phổ biến đến với mọi người.
Từ những vấn đề nêu ở phần 1.1, em nhận thấy rằng nhu cầu có một hệ thống
kết nối chủ nhà và người du lịch, đồng thời là nơi những người du lịch tự túc tìm
kiếm hay chia sẻ thông tin về chính chuyến đi của mình là cần thiết. Hệ thống sẽ
tập trung giải quyết hai nhu cầu chính tương ứng với hai đối tượng người dùng như
Đối với người du lịch tự túc: Hệ thống sẽ là nơi tập trung tổng hợp thông tin về
các homestay, những cơ chế để giúp họ tìm và thuê được nơi nghỉ phù hợp với các
tiêu chí của bản thân. Ngoài ra, họ cũng có thể chia sẻ chuyến đi của mình một
cách chi tiết cho những người đi sau tham khảo.
Đối với các chủ nhà: Hệ thống sẽ hỗ trợ cho các chủ nhà việc đăng tải thông tin
nơi ở của mình và đưa tới những người du lịch. Đồng thời cung cấp các cơ chế để
chủ nhà quản lý những lượt thuê phòng tại homestay của mình.
Ngoài ra, hệ thống còn đóng vai trò trung gian giữa chủ nhà và người dùng, đảm
bảo thu tiền khách thuê homestay và trả tiền cho chủ nhà. Những cơ chế giúp người
dùng để lại nhận xét, đánh giá cho homestay và phản hồi của chủ nhà đối với những
Từ việc xác định rõ nhiệm vụ cần giải quyết ở phần 1.2, giải pháp em đặt ra là
xây dựng một hệ thống Web tích hợp dành cho cả người du lịch và chủ homestay.
Hệ thống sẽ phát triển tách biệt riêng phần Frontend và phần Backend. Trong đó
phía Backend sẽ cung cấp API thực hiện các chức năng chính như: tìm kiếm thông
tin homestay, tìm kiếm phòng nghỉ phù hợp với tiêu chí của người dùng, tìm kiếm
các lịch trình được review trước đó... Frontend sẽ bao gồm 2 trang web, một trang
web dành cho chủ homestay và người có nhu cầu tìm kiếm thông tin về homestay,
lịch trình du lịch và một trang web dành cho quản trị viên hệ thống. Nội dung cụ
thể của hai trang web này như sau:
Tại trang web dành cho người dùng : mỗi người dùng khi đăng ký một tài khoản
trên hệ thống sẽ có thể đảm nhiệm 1 vai trò (người dùng hoặc chủ nhà) hoặc cả 2
vai trò (người dùng và chủ nhà).
Khi ở trong vai trò người dùng: người dùng có thể tìm kiếm homestay theo các
tiêu chí phù hợp và vào các trang hiển thị thông tin chi tiết của từng homestay. Khi
đã tìm cho mình được homestay và phòng phù hợp, người dùng có thể tiến hành
đặt phòng và thanh toán giá trị đơn đặt phòng. Sau khi đặt phòng và trải nghiệm
thực tế, người dùng có thể đánh giá, cho điểm và bình luận đóng góp ý kiến cho
homestay. Ngoài ra, hệ thống cũng cung cấp chức năng để người dùng có thể đăng
tải, chia sẻ chuyến đi của mình cho mọi người.
Khi ở trong vai trò chủ nhà: hệ thống cung cấp chức năng thêm/sửa thông tin
của một homestay (như là địa điểm, các loại phòng, giá phòng. . . ) và tắt trạng thái
hoạt động của homestay khi cần thiết. Thay đổi trạng thái của các đơn đặt phòng
được gửi đến từ người dùng.
Tại trang web dành cho quản trị viên hệ thống : hệ thống cung cấp quyền quản
lý các nội dung được đăng tải trên trang web.
Sau khi xác định được vấn đề, mục tiêu, phạm vi đề tài và định hướng giải pháp,
phần còn lại của báo cáo đồ án tốt nghiệp này được tổ chức như sau.
Trong Chương 2, em sẽ trình bày chi tiết về quá trình phân tích thiết kế hệ thống.
Quá trình này bao gồm việc khảo sát hiện trạng thực tế từ đó làm rõ các tác nhân
và các chức năng chính của hệ thống thông qua các biểu đồ use case tổng quan và
biểu đồ use case phân rã.
Trong Chương 3 em sẽ trình bày các công nghệ đã sử dụng ở từng phần Frontend,
Backend. Sau đó là đưa ra những lý do tại sao bản thân lại lựa chọn những công
Sau khi xác định được những chức năng cụ thể và những công nghệ được sử dụng,
Chương 4 trình bày về cách kết hợp những công nghệ đã trình bày ở chương 3 để
tạo nên kiến trúc phần cho toàn bộ hệ thống. Phần Backend và Frontend sẽ được
phát triển độc lập và giao tiếp với nhau thông qua API. Ngoài ra, chương này cũng
sẽ trình bày các vấn đề về công việc thiết kế như là thiết kế giao diện, cơ sở dữ liệu
và một vài công việc liên quan khác.
Trong Chương 5, em sẽ trình bày các giải pháp và những nội dung đóng góp mà
mình thấy tâm đắc nhất trong suốt quá trình làm ĐATN.
Cuối cùng, Chương 6 là tổng hợp lại quá trình phát triển ứng dụng, những kết quả
đạt được, những điều chưa làm được, những bài học kinh nghiệm cần rút ra. Nêu
ra định hướng phát triển của ứng dụng trong tương lai, bao gồm việc hoàn thiện
các tính năng hiện tại, phát triển các tính năng mới và đưa hệ thống đi vào sử dụng
thực tế trong cuộc sống.
•Nhóm chức năng đăng ký, đăng nhập.
•Nhóm chức năng xem thông tin: xem thông tin homestay, thông tin phòng,
thông tin đơn đặt phòng, các bài review điểm đến, bình luận và đánh giá,
thông tin cá nhân. . .
•Nhóm chức năng quản lý thông tin: quản lý thông tin cá nhân, quản lý danh
sách người dùng, quản lý danh mục homestay, quản lý danh sách đơn đặt
•Nhóm chức năng đặt phòng, thanh toán, tiếp nhận, xử lý đơn đặt phòng.
•Nhóm chức năng phản hồi: nhận xét và đánh giá phòng, review điểm đến.
Phần 2.2 này em sẽ tóm tắt các chức năng của phần mềm. Còn phần đặc tả chi
tiết em sẽ trình bày trong phần 2.3.
Tổng quan về hệ thống được mô tả trong Hình 2.1 . Hệ thống gồm có 4 tác nhân:
Khách hàng, Người dùng (Khách hàng đăng ký tài khoản để trở thành Người dùng),
Host (Người dùng đăng tải thông tin về homestay của mình để trở thành Host), và
Quản trị viên. Ứng với mỗi tác nhân là những vai trò, chức năng cụ thể trong hệ
Khách hàng: có thể tạo tài khoản cá nhân, xem và tìm kiếm homestay phù hợp
theo nhiều cách khác nhau, đọc những review về các địa điểm du lịch được người
Người dùng: có thể đặt phòng, quản lý các đơn đặt phòng của mình, đánh giá các
homestay mình từng lưu trú và viết review lịch trình du lịch của mình cho người
Host: có thể đăng tải, quản lý thông tin homestay, quản lý các đơn đặt phòng trong
Quản trị viên: sẽ có quyền quản lý các tài khoản của người dùng, các thông tin
được đăng tải trên hệ thống.
Ở hệ thống quản lý thì 3 tác nhân là Quản trị viên, Người dùng và Host cần đăng
nhập để có thể sử dụng được các chức năng của hệ thống. Host và Người dùng chỉ
có quyền quản lý thông tin homestay và đơn đặt phòng của mình.
Bên trên là những mô tả tổng quan về hệ thống bao gồm các tác nhân và các use
case chính. Phần sau em sẽ trình bày chi tiết các use case mức cao bằng các biểu
đồ use case phân rã.
a, Biểu đồ use case phân rã “Quản lý thông tin cá nhân”
Use case “Quản lý thông tin cá nhân” được mô tả thông qua Hình 2.2 với sự
tham gia của 2 tác nhân chính là Quản trị viên và Người dùng. Use case này bao
gồm 2 use case con.
Ngoài những thông tin cố định, Quản trị viên và Người dùng có thể thay đổi
thông tin cá nhân của mình như tên, giới tính, số điện thoại, ảnh đại diện.
b, Biểu đồ use case phân rã “Tìm kiếm homestay”
Use case “Tìm kiếm homestay” được thể hiện thông qua Hình 2.3 với sự tham
gia của 2 tác nhân chính là Khách hàng và Người dùng. Use case này bao gồm 5
Để tìm kiếm thông tin các homestay còn phòng trống, người dùng có 5 cách
lần lượt là “Tìm kiếm theo địa điểm” như là Hà Nội, Ba Vì.., “Tìm kiếm theo thời
gian” như là thời gian đi-thời gian về, “Tìm kiếm theo tên” của homestay, “Sắp xếp
theo giá” và “Sắp xếp theo sao” của các homestay tìm được theo trình tự từ thấp
đến cao hoặc từ cao xuống thấp (với sao là trung bình cộng số sao được đánh giá
từ những người sử dụng trước đó).
c, Biểu đồ use case phân rã “Quản lý homestay của tôi”
Use case “Quản lý thông tin homestay của tôi” được thể hiện thông qua Hình 2.4
với sự tham gia của 1 tác nhân chính là Host. Use case này bao gồm 4 use case con.
Host có thể xem, thêm, sửa thông tin về homestay, các phòng trong homestay và tắt
trạng thái hoạt động của homestay hay các phòng của homestay khi cần thiết. Hơn
nữa Host có thể xem, thay đổi trạng thái các đơn đặt phòng được gửi từ người dùng
(chấp nhận hoặc từ chối).
d, Biểu đồ use case phân rã “Quản lý lịch sử đặt phòng”
Use case “Quản lý thông tin lịch sử đặt phòng” được thể hiện thông qua Hình
Người dùng sau khi tìm được homestay/phòng ưng ý có thể tiến hành tạo đơn đặt
phòng. Ngoài ra, sau khi đặt, nếu người dùng không còn mong muốn thuê phòng
nữa thì có thể thay đổi trạng thái đơn thành hủy (chỉ được hủy trước khi Host duyệt
e, Biểu đồ use case phân rã “Quản lý hệ thống”
Use case “Quản lý hệ thống” được thể hiện thông qua Hình 2.6 với sự tham gia
của tác nhân chính là Quản trị viên. Use case này bao gồm các thao tác quản lý là
thao tác thêm/sửa/thay đổi trạng thái hoạt động của các đối tượng và bao gồm 5 use
Bên cạnh các yêu cầu về chức năng, trang web còn đưa ra các yêu cầu phi chức
Để trang web có giao diện đẹp mà vẫn đơn giản, dễ dàng sử dụng, em đã có đưa
ra các quy tắc để thống nhất màu sắc, vị trí, hình dáng của các phần tử trong một
trang và giữa các trang với nhau. Ngoài ra em cũng bố trí các chức năng một cách
hợp lý, thuận tiện theo thao tác thông thường để tránh các lỗi người dùng xuất hiện
Trang web hoạt động ổn định, tương thích với các trình duyệt hiện nay như Chrome,
Cốc Cốc trên thiết bị máy tính.
Thông tin quan trọng của người dùng được mã hóa trước khi gửi đi.
Ở trong phần này em sẽ trình bày về các công nghệ sử dụng cho phần Frontend
của hệ thống, bao gồm cả trang cho Người dùng và trang dành cho Quản trị viên
ReactJS [1] [2] là một thư viện phát triển ứng dụng phía client được Facebook
xây dựng và công bố lần đầu tiên vào năm 2011. Cho đến hiện tại, React được nhiều
hệ thống lớn sử dụng tiêu biểu như là Facebook, Shopee. Trước khi có ReactJS, việc
tương tác và xử lý giao diện chủ yếu sử dụng Javascript thuần (vanilla Javascript)
và JQuery để xây dựng giao diện người dùng. Các tương tác này sẽ được thực hiện
lên DOM (document object model), một cấu trúc trình duyệt Web sử dụng để tạo
ra giao diện cho người dùng. Hình 3.1 thể hiện cấu trúc của 1 trang web khi được
Thế nhưng với các trang web thông thường, với mỗi lần tương tác thay đổi khi
người dùng gửi yêu cầu dữ liệu mới thì phía server sẽ kiểm tra, tính toán và trả
về toàn bộ cây DOM cho trang web. Việc thường xuyên thao tác lên DOM sẽ gây
giảm hiệu suất, làm ứng dụng chậm hơn. Thực tế có một số phương pháp như sử
dụng Ajax, thư viện Jquery,... đã phần nào giải quyết được vấn đề này nhưng đối
với những hệ thống lớn thì việc mở rộng phát triển, bảo trì còn gặp nhiều khó khăn.
Vì vậy ReactJS tạo ra với mục đích chính là cải thiện quá trình phát triển giao diện
người dùng, làm cho việc tương tác với các thành phần trong ứng dụng trở nên dễ
dàng hơn. Để làm được như vậy, ReactJS đã đưa ra 2 khái niệm quan trọng bao
gồm : JSX và Virtual DOM.
JSX: là một bộ cú pháp mở rộng của JavaScript, cho phép lập trình viên viết
HTML trong ReactJS một cách dễ dàng. Các đoạn code JavaScript tạo ra các phần
tử HTML thông qua jsx có thể tái sử dụng được gọi là Component (Thành phần).
Tính năng này giúp cho tốc độ phát triển giao diện người dùng trở lên nhanh gọn
hơn. Việc chia giao diện thành nhiều các component nhỏ lẻ là một cách hiệu quả
giúp cho mã nguồn có thể dễ dàng mở rộng và bảo trì hơn. Hình 3.2 mô phỏng một
trang web được chia thành nhiều component. Mỗi ô trong nét đứt đấy tương đương
Virtual DOM : Virtual DOM sinh ra để giải quyết vấn đề nêu trên của cây DOM
thật. ReactJS sinh ra và sử dụng DOM ảo (Virtual DOM) để nâng cao hiệu suất của
nó. Các thay đổi bất kì phần tử nào được thay đổi trên trang web sẽ được tương tác
lên trên DOM ảo. Khi tất cả các thay đổi được cập nhật trên DOM ảo, React dùng
thuật toán so sánh diff của React để kiểm tra xem thay đổi nào cần áp dụng vào
DOM gốc, và sau đó nó áp dụng thay đổi này vào chính xác chỗ cần thay đổi. Điều
này sẽ giúp tối ưu những cập nhật trên DOM thật, do đó giảm hao tốn hiệu suất của
việc cập nhật DOM thật. Hình 3.3 cho thấy cây DOM ảo và quá trình cập nhật dữ
Các vòng tròn đỏ đại diện cho các phần tử giao diện người dùng đã thay đổi
trạng thái. React sẽ tính toán sự khác nhau giữa phiên bản trước của cây DOM ảo
so với hiện tại. Khi React biết các đối tượng DOM ảo nào đã thay đổi, sẽ tiến hành
cập nhật duy nhất đối tượng đó vào DOM thật. Điều này làm cho hiệu xuất nhanh
hơn đáng kể khi so sánh với thao tác trực tiếp với DOM thực, làm cho React nổi bật
như một thư viện JavaScript hiệu suất cao. Cho tới thời điểm hiện tại, React được
rất nhiều lập trình viên ưa chuộng, chính vì vậy cộng đồng hỗ trợ và hỏi đáp rất
đông đảo. Đi kèm với ReactJS cũng kéo theo rất nhiều công cụ phát triển giúp cho
việc debug code một cách dễ dàng hơn. Theo thời gian mà hầu hết các chức năng
và hiệu ứng cơ bản về phía giao diện người dùng đều đã có thư viện hỗ trợ.
Trong phần này em sẽ trình bày về các công nghệ đã sử dụng cho phần Backend
Nodejs [3] là một nền tảng JavaScript mạnh mẽ được xây dựng trên JavaScript V8
Engine của Google Chrome. Phần Core bên dưới của Nodejs được viết hầu hết
bằng C++ nên cho tốc độ xử lý và hiệu năng khá cao giúp tạo ra được các ứng dụng
có tốc độ xử lý nhanh, realtime thời gian thực.
Với các ứng dụng web truyền thống, mỗi request sẽ tạo ra một luồng xử lý yêu
cầu mới và chiếm RAM của hệ thống như Hình 3.4 . Vì vậy dẫn đến việc tài nguyên
của hệ thống sẽ không được sử dụng hiệu quả. Chính vì như vậy mà NodeJS sử dụng
đơn luồng (Single-Threaded) kết hợp với non-blocking I/O để thực thi các request
nhưHình 3.5 cho phép hỗ trợ hàng chục nghìn kết nối đồng thời. Đồng thời hệ
thống nén của NodeJS-npm cũng là hệ thống thư viện nguồn mở lớn nhất trên thế
Khi nói đến các framework NodeJS phổ biến nhất thì Express [4] [5] là lựa chọn
được nhiều người ưa chuộng hiện tại. Framework Express nhẹ, cực kì nhanh, cung
cấp các tiện ích mở rộng để hỗ trợ nhiều chức năng cho nó. Express rất đơn giản để
tùy chỉnh và sử dụng theo nhu cầu. Nó cung cấp cho chúng ta đầy đủ tiện ích để có
thể xây dựng một ứng dụng web hay một API. Hình 3.6 là cấu trúc tổng quát của
một ứng dụng theo framework Express.
Một số ưu điểm của framework Express có thể kể đến như hỗ trợ chúng ta phát
triển ứng dụng theo mô hình MVC, cho phép định nghĩa các middleware, định
nghĩa rõ ràng các request methods trong router và hỗ trợ mạnh về REST API.
Trong hệ thống này em chọn sử dụng mô hình Client-Server.
Mô hình Client-Server server là một mô hình nổi tiếng trong mạng máy tính, được
áp dụng rất rộng rãi và là mô hình của nhiều trang web hiện có. Trong mô hình này
các máy tính client được đóng vai trò như một máy khách (client), chúng sẽ gửi yêu
cầu (request) đến các máy chủ (server) để máy chủ xử lý những yêu cầu đó và trả
kết quả về cho client. Kiến trúc tổng quan của hệ thống được mô tả trong Hình 4.1
Cụ thể trong hệ thống thuê và cho thuê homestay này sẽ có 2 Client tương ứng
với 2 trang web khác nhau. Một trang dành cho người dùng, một trang dành cho
quản trị viên trang web. Phía server sẽ gồm các API. Trong đó Server sẽ cung cấp
các API lấy dữ liệu của các homestay, các phòng, các bình luận, các bài review,
thông tin người dùng,...từ CSDL cho Client.
Ở phía frontend em sử dụng thư viện React nên cấu trúc frontend em sẽ tập trung
vào việc trình bày cấu trúc Component trong hệ thống. Do số lượng Component
trong hệ thống là tương đối nhiều nên em sẽ chỉ trình bày những Component chính
Trang web cho Người dùng và Host:
PageHistory Page Payment Page Review PageMy Homestay
Trong đó App là Component tổng trong ReactJS, bao gồm 6 trang chính là :
Home Page (trang chủ), Homestay Page (Danh sách homestay), History Page
(Lịch sử đặt phòng), Payment Page (Chọn phương thức thanh toán), Review Page
(Danh sách review địa điểm), My Homestay Page (Trang quản lý Homestay của
Host). Ở đây em nhận thấy giao diện mỗi trang đều có phần Header ,Boxchat nên
em viết tách riêng các Component này và tái sử dụng chúng ở trong các trang trên.
Trang web cho quản trị viên:
trị viên, em chia thành 2 trang chính : Login Page (Trang đăng nhập) và Admin
Page (Trang quản trị). Trong đó, trang quản trị sẽ bao gồm các Component nhỏ
hơn là User (Tài khoản người dùng), Homestay ,Booking (Đơn đặt phòng), Room
Category (Các loại phòng trong homestay). Và các Component dùng chung cho
4 component trên là Header ,List(Xem danh sách), Details View (Xem chi tiết),
Như đã trình bày trong phần 3.2.1, phần API em sẽ sử dụng framework Express.
Ứng dụng sẽ chia thành 3 phần chính là Controller ,Route vàModel .Model mô
tả giao diện collection hiển thị như thế nào (nó bao gồm thuộc tính và phương
thức để định nghĩa kiểu dữ liệu cho các thuộc tính đó). Route để xác định cách
mà ứng dụng phản hồi các yêu cầu của máy khách tại một endpoint cụ thể, là một
URL (hoặc đường dẫn) và một phương thức request HTTP cụ thể (GET, POST, ...).
Mỗi route có một hàm handler khác nhau, được thực thi khi route được khớp nhau.
Controller là nơi xử lý tất cả các logic nghiệp vụ. Nói cách khác, Route sẽ tiếp
nhận yêu cầu từ phía frontend, điều hướng tới Controller để xử lý tất cả các logic
Do số lượng route nhiều nên em sẽ chỉ trình bày một vài route chính có trong hệ
thống và mô tả chúng trong Hình 4.4 .
Có 8 route chính là : users, homestays, rooms, orders, comments, payment,
reviews, likeReview . Mỗi route sẽ có controller và model tương ứng để xử lý logic
nghiệp vụ. Việc chia ra từng route với controller và model riêng biệt sẽ giúp ta
quản lý các logic dễ dàng hơn. Khi hệ thống cần phát triển lớn yêu cầu những logic
nghiệp vụ phức tạp hơn thì đây cũng là kiến trúc khiến cho ứng dụng dễ mở rộng
và bảo trì đối với lập trình viên.
Đối với giao diện trên hệ thống, em thiết kế sao cho người dùng dễ dàng sử dụng,
bố trí các nút chức năng hợp lý và phối hợp màu sắc thống nhất theo quy tắc như
•Với các nút đăng ký, đăng nhập và thêm mới sẽ có nền màu xanh dương, chữ
•Với mỗi thao tác thành công sẽ hiển thị thông báo màu xanh lá.
•Những lỗi xảy ra do thao tác của người dùng sẽ hiện thông báo màu đỏ.
•Những ô nhập dữ liệu bắt buộc thì trước tiêu đề của ô đó sẽ có biểu tượng dấu
Giao diện Desktop hiện tại đang hoạt động ổn định với 3 kích cỡ màn hình là
1366x768, 1440x695, 1920x937. Hình 4.5, 4.6, 4.7, 4.8 là giao diện mockup và
giao diện thực tế trên màn hình Desktop ở một vài trang tiêu biểu trong hệ thống.
a, Tìm kiếm phòng theo điều kiện:
để nhập các điều kiện, nút tìm kiếm, ô chọn kiểu sắp xếp và danh sách các homestay.
quan đến homestay như là thông tin các phòng, các bình luận và đánh giá từ người
dùng. . . Tại đây ta sẽ lựa chọn số lượng phòng mong muốn và hệ thống sẽ hiển thị
số lượng phòng đã chọn và tổng số tiền cần thanh toán.
Khi bấm vào nút “Tôi sẽ đặt”, biểu mẫu nhập thông tin hiện ra như Hình 4.12 ,
người dùng có thể xem lại các thông tin liên quan đến đơn đặt phòng và chỉnh sửa
thông tin cá nhân hay để lại ghi chú (nếu muốn).
CácHình 4.13, 4.14 lần lượt là các trang lựa chọn hình thức thanh toán, nhập
thông tin thẻ ngân hàng để tiến hành thanh toán trực tuyến.
Với các thao tác nhập sai hay nhập thiếu thông tin thì các thông báo đỏ sẽ được
hiển thị như Hình 4.15, 4.16 (đây là giao diện do chính cổng thanh toán VNPAY
cung cấp, em chỉ tích hợp chúng vào trang web của mình).
 Hình 4.16: Giao diện yêu cầu nhập thông tin
Khi đặt phòng thành công, màn hình sẽ chuyển về trang Lịch sử order như Hình
b, Quản lý đơn đặt phòng
Host có thể biết được thông tin khái quát về các đơn đặt phòng được gửi đến từ
Để biết thông tin chi tiết của đơn, Host cần vào trang chi tiết đơn đặt phòng được
mô tả trong Hình 4.19 . Ở đây, Host có quyền phê duyệt các đơn đặt phòng thông
qua 2 nút chấp nhận hoặc từ chối. Nếu ấn chấp nhận, yêu cầu sẽ xác nhận được
Khi đơn đặt phòng được Host xác nhận và người dùng đã lưu trú ở homestay thì
người dùng có thể đánh giá chất được homestay đó theo thang điểm 5 và để lại cảm
nghĩ của mình trong ô bình luận. Hình 4.20 mô tả giao diện biểu mẫu nhập đánh
Tương tự như chức năng đánh giá homestay, khi đơn đặt phòng được Host xác
nhận và người dùng đã lưu trú ở homestay thì người dùng có thể chia sẻ, đăng bài
review về lịch trình du lịch của cá nhân. Hình 4.21 mô tả giao diện biểu mẫu nhập
Hệ thống được triển khai trên môi trường local với:
•Hệ điều hành: Window 10, MacOS
•Trình duyệt: Cốc cốc, Google Chrome
•Nền tảng: NodeJS Thực thi chạy chương trình từ terminal
Các bước cài đặt để chạy thử trang web trên môi trường local:
Bước 1. Cài đặt git
Bước 2. Cài đặt Nodejs (version 14.17.0)
Bước 3. Tải source code (mã nguồn)
Bước 4. Chạy lệnh npm install trên từng thư mục
Bước 5. Chạy lệnh npm start trên từng thư mục để khởi chạy trang web
Chương này em xin trình bày những nội dung đóng góp mà mình thấy tâm đắc
nhất trong suốt quá trình làm ĐATN.
Phía frontend: Tự thiết kế giao diện trang web và xây dựng dựa trên các thành
phần có sẵn trong thư viện Ant Design.
Phía backend: Xây dựng các chức năng phía backend phù hợp với đối tượng người
•Khách hàng: chức năng đăng ký, tìm kiếm, xem thông tin homestay, các bài
•Người dùng: các chức năng quản lý thông tin cá nhân, đặt phòng, thanh toán,
nhận xét và đánh giá phòng, nhận xét điểm đến. . .
•Host: chức năng quản lý homestay, tiếp nhận, xử lý đơn đặt phòng. . .
•Quản trị viên: quản lý danh sách người dùng, quản lý danh mục homestay,
quản lý danh sách đơn đặt phòng...
Từ chính bản thân mình và những bạn bè xung quanh, em nhận thấy rằng mọi
người thường có thói quen sẽ tìm hiểu những thông tin về các địa điểm du lịch trước
khi tự mình đến đó trải nghiệm. Từ đó đẫn đến hai vấn đề sau:
Thông tin nằm rải rác: những thông tin người dùng muốn tìm hiểu thường không
tập trung tại một nơi mà rải rác trên các nền tảng. Thông thường mọi người đều
tra cứu trên mạng internet hay thông qua các bài viết trên mạng xã hội như là
facebook. . . Trên internet thì đều là những thông tin mang tính khái quát, tổng thể.
Trên facebook mặc dù có những nhóm riêng tại mỗi địa điểm du lịch nổi tiếng
nhưng hầu hết các bài viết trong nhóm đều nhằm mục đích kinh doanh và hầu như
rất ít bài review về địa điểm đó.
Tính xác thực: dù thông tin có được tại đâu đi nữa, nhưng do nền tảng internet,
mạng xã hội nên bất kỳ ai cũng có thể đăng các thông tin lên đó mà không có bất
kỳ ràng buộc nào. Thế nên chúng ta không thể biết được liệu thông tin trong các
bài viết đó có đúng hay không, hay chỉ là một bài quảng cáo cho một homestay, địa
Chính từ những vấn đề nêu trên, em đã xây dựng trong hệ thống của mình một
cơ chế để tập hợp, nâng cao tính xác thực của những bài review.
Đối với vấn đề thông tin nằm rải rác : giải pháp của em chính là tập hợp tất cả
các bài review trong hệ thống lại tại một nơi duy nhất là màn “Review điểm đến”,
sau đó phân chia các bài review đó theo từng tỉnh thành cụ thể như Hình 5.1 . Nhờ
đó, người dùng bất kỳ chỉ cần chọn địa điểm mình mong muốn là có thể xem được
tất cả các review của địa điểm đó. Hình 5.2 là ví dụ một kết quả hiện ra các bài
review theo lựa chọn của người dùng.
Đối với vấn đề xác thực , tính tin cậy trong các bài review : để giải quyết được
Để giải quyết vấn đề này, em có bổ sung 3 điều kiện tìm kiếm tích hợp cho hệ
thống đó là: tìm kiếm theo tên, sắp xếp theo giá và sắp xếp theo sao (điểm người
dùng đánh giá cho homestay). Người dùng có thể chọn tích hợp một số các điều
kiện trên để tìm kiếm phòng mà mình mong muốn.
Tìm kiếm theo thời gian và địa điểm
Khi nhập thời gian và địa điểm du lịch (ví dụ: chọn Ninh Bình, từ 19-20/07/2022),
hệ thống sẽ hiển thị 3 homestay thỏa mãn như Hình 5.3 .
Với chức năng này, người dùng có thể sắp xếp các homestay tìm được theo số sao
từ thấp đến cao hoặc từ cao xuống thấp. Hình 5.4 mô tả lựa chọn sắp xếp từ cao
Tương tự chức năng sắp xếp theo sao, Hình 5.5 mô tả lựa chọn sắp xếp giá từ cao
c, Định hướng phát triển:
Ngoài các điều kiện đã được nêu, thì còn nhiều điều kiện khác sẽ hỗ trợ tối đa
cho người dùng như là: tìm kiếm theo số lượng người lớn - trẻ em, theo khoảng giá
(từ 300000đ đến 600000đ. . . ),...Chính vì thể định hướng em dành cho chức năng
này là bổ sung thêm nhiều điều kiện tìm kiếm sao cho phù hợp và có ích đối với
bao gồm danh sách homestay người dùng đã từng liên lạc, nội dung trò chuyện và
ô nhập tin nhắn mới.
Tương tự như boxchat cá nhân Hình 5.9 minh họa cho boxchat của Host, bao
gồm danh sách những người dùng đã từng liên lạc với homestay, nội dung trò
chuyện và ô nhập tin nhắn mới
Đây là chương tổng kết kiến thức đã học, các kinh nghiệm rút ra và các kết quả
mà em đã đạt được trong suốt quá trình làm ĐATN. Sau đó, em đưa ra một vài
hướng phát triển bản thân chưa kịp làm để cải thiện, nâng cao chất lượng cho trang
Trong suốt quá trình thực hiện ĐATN, em đã hoàn thành trang web đặt phòng,
thuê homestay đơn giản với những chức năng cơ bản của người dùng. Mặc dù chỉ
mới là sản phẩm còn đơn sơ nhưng thông qua quá trình vừa làm vửa tìm hiểu em
đã học hỏi và hoàn thiện được các kỹ năng như:
•Các công nghệ phát triển web: HTML, CSS, Javascript, ReactJS, NodeJS,. . . và
một số thư viện hỗ trợ lập trình web khác như Ant Design. . .
•Sử dụng tương đối các câu truy vấn cơ sở dữ liệu.
•Biết dùng git để quản lý source code.
•Biết sử dụng kết hợp firebase để lưu trữ dữ liệu.
Đồng thời, em cũng rút ra được cho mình những bài học kinh nghiệm:
•Cần phải tìm hiểu thật kỹ đề tài mà mình chọn trước khi bắt tay vào thực hiện
•Việc suy xét kỹ lưỡng cấu trúc của cơ sở dữ liệu là điều vô cùng quan trọng.
Nếu cơ sở dữ liệu không chính xác ngay từ đầu sẽ mất rất nhiều thời gian để
sửa, thậm chí là phải bắt đầu lại từ đầu.
•Thiết kế giao diện không chỉ cần đẹp mà còn phải cần sự thống nhất toàn cục
trong trang web, điều này giúp người dùng dễ dàng sử dụng và có trải nghiệm
•Trước khi dùng thư viện, ngôn ngữ nào đó thì nên tìm hiểu sơ qua các thư
viện, ngôn ngữ tương tự, so sánh ưu nhược điểm để tìm ra thư viện, ngôn ngữ
phù hợp nhất với trang web của mình.
Một số hướng phát triển, định hướng công việc trong tương lai mà em dành cho
•Trước tiên, để hoàn thiện các chức năng đã làm, cần đưa trang web vào sử
dụng thực tế để lấy ý kiến, phản hồi của người dùng làm cơ sở để sửa đổi, bổ
sung các tính năng cần thiết.
•Xây dựng tính năng giúp Host cài đặt giá phòng thay đổi theo thời gian mong
muốn, để Host tạo ra và cung cấp các mã giảm giá của riêng homestay.
•Cải tiến hệ thống với chức năng quản lý không đơn thuần chỉ là quản lý thông
tin mà có thể thống kê doanh thu, thống kê tỷ lệ lấp đầy phòng của homestay.
•Phát triển trang web thành các ứng dụng trên điện thoại di động để thuận tiện